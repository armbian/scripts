name: Maintain Runners

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      checking:
       required: false
       type: boolean
    secrets:
      KEY_TORRENTS:
        required: true
      KNOWN_HOSTS_UPLOAD:
        required: true
jobs:

  Prepare:

    name: Prepare
    runs-on: Linux
    if: ${{ github.repository_owner == 'armbian' }}
    outputs:
      matrix: ${{steps.list_dirs.outputs.matrix}}
    steps:

      - name: Remove previous artefacts if any
        run: |
        
          sudo mountpoint -q build/output/debs && sudo fusermount -u build/output/debs || true
          sudo mountpoint -q build/output/debs-beta && sudo fusermount -u build/output/debs-beta || true
          sudo mountpoint -q build/cache/toolchain && sudo fusermount -u build/cache/toolchain || true
          sudo rm -rf changes 2>/dev/null || true
          sudo rm -rf build/.tmp 2>/dev/null || true
          if [[ $(curl -s http://ifconfig.me) == "93.103.15.56" ]]; then
              sudo mountpoint -q build/cache/rootfs && sudo fusermount -u build/cache/rootfs || true
              sudo mountpoint -q build/cache/toolchain && sudo fusermount -u build/cache/toolchain || true
          fi
          sudo mountpoint -q build/output/images && sudo fusermount -u build/output/images || true
          sudo mountpoint -q build/output/tmp && sudo fusermount -u build/output/tmp || true
          sudo chown -R $USER:$USER build/.git

      - name: Download changes
        if: ${{ inputs.checking }}
        uses: actions/download-artifact@v3
        with:
          name: changes

      - name: Delete control artefact
        uses: geekyeggo/delete-artifact@v1
        if: ${{ inputs.checking }}
        with:
          name: changes

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/build
          path: build
          ref: nightly
          clean: true

      - name: Install SSH key for storage
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.KEY_TORRENTS }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
          if_key_exists: replace

      - name: Clean upload folder
        run: |

          # mount deploy target
          sudo apt-get -y -qq install sshfs
          sudo mkdir -p /root/.ssh/
          sudo cp ~/.ssh/known_hosts /root/.ssh/
          sudo mkdir -p build/output/tmp || true          
          sudo sshfs upload@users.armbian.com:/ build/output/tmp -o IdentityFile=~/.ssh/id_rsa -o reconnect,nonempty -o allow_other
          sudo rm -rf build/output/tmp/debs/* || true
          sudo rm -rf build/output/tmp/debs-beta/* || true
          sudo rm -rf build/output/tmp/images/* || true
          sudo mountpoint -q build/output/debs && sudo fusermount -u build/output/debs || true
          sudo mountpoint -q build/output/tmp && sudo fusermount -u build/output/tmp || true

      - name: Prepare matrix
        id: list_dirs
        run: |
          MATRIX="seq -w 01 100"
          [[ -s changes ]] || unset MATRIX
          echo ::set-output name=matrix::$(for x in $(eval $MATRIX); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq)

  Purge:
  
    needs: [ Prepare ]
    runs-on: [self-hosted, Linux, small]
    if: ${{ needs.Prepare.outputs.matrix != '[]' && needs.Prepare.outputs.matrix != '' }}
    timeout-minutes: 480
    strategy:
      fail-fast: false
      matrix: 
        node: ${{fromJson(needs.Prepare.outputs.matrix)}}
    steps:
   
      - name: Cleaning
        run: |
          
          # Check where we are
          pwd
        
          # make sure no temporally dirs are mounted from previous runs
          while :
          do
              sudo pkill compile.sh || true
              sudo pkill arm-binfmt-P || true
              sudo pkill aarch64-binfmt-P || true
              sudo pkill pixz || true              
              sudo mountpoint -q build/output/images && sudo fusermount -u build/output/images || true
              sudo mountpoint -q build/output/tmp && sudo fusermount -u build/output/tmp || true
              sudo mountpoint -q build/cache/rootfs && sudo fusermount -u build/cache/rootfs || true
              sudo mountpoint -q build/cache/toolchain && sudo fusermount -u build/cache/toolchain || true              
              [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 && $(sudo mountpoint -q build/output/images; echo $?) -eq 1 ]] && sudo rm -rf build/.tmp && break
              echo "Mounted temp directories. Trying to unmount."
              df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
              sleep 10
          done

          if [[ -f build/VERSION ]]; then
          
            sudo docker system prune -af  || true
            sudo docker volume rm $(sudo docker volume ls -q) 2>/dev/null || true
            # sudo docker stop $(sudo docker ps -a -q) 2>/dev/null || true
            # sudo docker rm $(sudo docker ps -a -q) 2>/dev/null || true          
            # sudo docker image rm $(sudo docker images | grep -v $(cat build/VERSION | sed 's/trunk.*/trunk/')"-$(dpkg --print-architecture)" | awk 'NR>1 {print $3}') 2> /dev/null || true 

          fi
          
          # check if swap exists
          swapon

          # remove aptly - we don't need it anymore
          sudo rm -f /etc/apt/sources.list.d/aptly.list
          sudo echo '* libraries/restart-without-asking boolean true' | sudo debconf-set-selections
          sudo DEBIAN_FRONTEND=noninteractive apt-get -y purge needrestart unattended-upgrades
          sudo DEBIAN_FRONTEND=noninteractive apt-get -y update
          sudo DEBIAN_FRONTEND=noninteractive apt-get -y install jq
          sudo DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y  -y -qq --with-new-pkgs upgrade
          sudo DEBIAN_FRONTEND=noninteractive apt-get -y autoremove
          [[ -d build/.git ]] && sudo chown -R $USER:$USER build/.git || true
          [[ -d build/output/images ]] && sudo rm -rf build/output/images/* || true
          sudo rm -rf build-* 2>/dev/null || true
          sudo rm -rf temp 2>/dev/null || true
          sudo rm -rf changes.txt 2>/dev/null || true
          sudo rm *.conf 2>/dev/null || true
          sudo rm *.txt 2>/dev/null || true
          sudo rm -rf cache/sources/ || true
          sudo rm -rf output/ || true          
          sudo chown -R $USER:$USER build/.git || true
          # rm $HOME/.ssh/known_hosts
          
          # mount all back
          sudo mount -a

      - name: Checkout Armbian build script
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/build
          path: build
          clean: false

      - name: Ignore changes
        run: |

          [[ -d build ]] && sudo touch build/.ignore_changes || true

  Finish:
    name: Finish
    needs: [Purge]
    runs-on: [self-hosted, Linux, small]
    if: ${{ github.repository_owner == 'Armbian' }}
    steps:
       - name: Run script
         run: |
           echo "Finish" 
