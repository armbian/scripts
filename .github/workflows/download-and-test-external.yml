name: Sync 3rd party packages
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      ACCESS_NAME:
       required: false
       type: string
       default: ${{ github.repository_owner }}
      BUILD_BRANCH:
       required: false
       type: string
       default: 'main'
      BUILD_RUNNER:
       required: false
       type: string
       default: "ubuntu-latest"
      REFERENCE:
       required: false
       type: string
       default: "main"
    secrets:
      GPG_KEY1:
        required: true
      GPG_PASSPHRASE1:
        required: true
      ACCESS_TOKEN:
        required: true
      KEY_UPLOAD:
        required: false
      HOST_UPLOAD:
        required: true
      HOST_UPLOAD_USER:
        required: true
      HOST_UPLOAD_PORT:
        required: true
      KNOWN_HOSTS_ARMBIAN_UPLOAD:
        required: true

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PR_NUMBER: ${{ github.event.number }}

jobs:

  start:
    runs-on: ${{ inputs.BUILD_RUNNER }}
    name: "Mirror"
    outputs:
      matrix: ${{steps.lists.outputs.matrix}}
    steps:

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.KEY_UPLOAD }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_ARMBIAN_UPLOAD }}
          if_key_exists: replace

      - name: Change status to done
        if: inputs.REFERENCE == 'main'
        run: |

          echo "running" > status
          rsync -e "ssh -p ${{ secrets.HOST_UPLOAD_PORT }}" -arvc status ${{ secrets.HOST_UPLOAD_USER }}@${{ secrets.HOST_UPLOAD }}:/incoming/debs
          rsync -e "ssh -p ${{ secrets.HOST_UPLOAD_PORT }}" -arvc status ${{ secrets.HOST_UPLOAD_USER }}@${{ secrets.HOST_UPLOAD }}:/incoming/debs-beta

      - name: Remove temporally repositories
        run: |
          ssh artifacts@armbian.tnahosting.net "rm -rf artifacts/*"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: armbian/os
          path: os
          fetch-depth: '2'
          clean: false

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          path: os
          files: |
            external/*.conf

      - name: Build list
        id: lists
        run: |

          MATRIX=$(echo ${{ steps.changed-files.outputs.all_changed_files }}  | tr " " "\n" | cut -d"." -f1 | cut -d"/" -f2)
          [[ "${{ inputs.REFERENCE }}" =~ ^(main|)$ ]] && MATRIX=$(find os/external/*.conf -printf '%f\n' | cut -d"." -f1)
          echo "matrix=$(for x in $(echo "${MATRIX}"); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq -c)" >> $GITHUB_OUTPUT

  download:
    needs: [start]
    outputs:
      project: ${{steps.make.outputs.project}}
    strategy:
      fail-fast: false
      max-parallel: 18
      matrix:
        node: ${{fromJson(needs.start.outputs.matrix)}}

    name: "M"
    runs-on: ${{ inputs.BUILD_RUNNER }}
    steps:
    
      - name: Update
        if: inputs.BUILD_RUNNER == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt -y clean

      - name: Free Github Runner
        if: inputs.BUILD_RUNNER == 'ubuntu-latest'
        uses: descriptinc/free-disk-space@main
        with:
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.KEY_UPLOAD }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_ARMBIAN_UPLOAD }}
          if_key_exists: replace

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY1 }}
          passphrase: ${{ secrets.GPG_PASSPHRASE1 }}

      - name: Checkout Armbian OS scripts
        uses: actions/checkout@v4
        with:
          repository: armbian/os
          path: os
          ref: ${{ inputs.REFERENCE }}
          fetch-depth: '1'
          clean: false

      - name: Checkout Armbian build script
        uses: actions/checkout@v4
        with:
          repository: armbian/build
          path: build
          fetch-depth: '1'
          clean: false

      - name: Install Aptly
        run: |
          wget https://github.com/aptly-dev/aptly/releases/download/v1.5.0/aptly_1.5.0_amd64.deb
          sudo dpkg -i aptly_1.5.0_amd64.deb
          sudo rm aptly_1.5.0_amd64.deb

      - name: Install all keys
        run: |
          find os/external/keys/ -type f -name "*.gpg" -exec gpg --import --no-default-keyring --keyring trustedkeys.gpg "{}" \;
          sudo apt-get -y install debian-keyring ubuntu-keyring
          gpg --no-default-keyring --keyring trustedkeys.gpg --keyserver keyserver.ubuntu.com --recv-keys 648ACFD622F3D138 0E98404D386FA1D9

      - name: Download
        run: |

          # default download folder
          SOURCE="temp/"
          mkdir -p ${SOURCE}

          # read config
          . os/external/${{ matrix.node }}.conf

          # read existing releases
          ALL_RELEASES=($(grep -rw build/config/distributions/*/support -ve 'eos' | cut -d"/" -f4 ))

          # recreate folder structure as we are uploading to our system
          for i in ${ALL_RELEASES[@]}; do
              mkdir -p build/output/{debs,debs-beta}/${i}
              mkdir -p build/output/{debs,debs-beta}/extra/${i}-utils
              mkdir -p build/output/{debs,debs-beta}/extra/${i}-desktop
          done

          # we use different download metods (github, aplty)
          if [[ ${METHOD} == gh ]]; then
              gh release download -p '*.deb' --repo ${URL} --dir temp
          elif [[ ${METHOD} == direct ]]; then
              wget -O ${SOURCE}/${{ matrix.node }}.deb ${URL}
          else
              SOURCE="/home/runner/.aptly/public/"
              COMPONENT="main"
              [[ $KEY == "./" || $KEY == "stable" ]] && COMPONENT=""
              [[ $GLOB != *Name* && $GLOB != *Version* ]] && ADDITIONAL_FILTER="-filter-with-deps"
              aptly -filter="$GLOB" ${ADDITIONAL_FILTER} -architectures="$(echo $ARCH | sed "s|:|,|g")" mirror create ${{ matrix.node }}-${RELEASE} $(echo ${URL}) $(echo ${KEY}) $(echo ${COMPONENT})
              aptly -max-tries=3 mirror update ${{ matrix.node }}-${RELEASE}
              aptly snapshot create ${{ matrix.node }}-${RELEASE} from mirror ${{ matrix.node }}-${RELEASE}
              aptly publish -architectures="armhf,arm64,amd64,riscv64" -batch=true -passphrase=${{ secrets.GPG_PASSPHRASE1 }} snapshot ${{ matrix.node }}-${RELEASE}
          fi

          # Cleaning exceptions
          find $SOURCE -type f -name "zoom_*" | sort | head -n -1 | xargs sudo rm || true
          find $SOURCE -type f -name "box*-generic*" | sort | head -n -1 | xargs sudo rm || true
          find $SOURCE -type f -name "box*-arm64_*" | sort | head -n -1 | xargs sudo rm || true
          find $SOURCE -type f -name "box*-rk3399_*" | sort | head -n -1 | xargs sudo rm || true
          find $SOURCE -type f -name "box*-rk3588_*" | sort | head -n -1 | xargs sudo rm || true
          find $SOURCE -type f -name "box*-tegrax1_*" | sort | head -n -1 | xargs sudo rm || true
          find $SOURCE -type f -name "box*-rpi3arm64*" | sort | head -n -1 | xargs sudo rm || true
          find $SOURCE -type f -name "box*-rpi4arm64*" | sort | head -n -1 | xargs sudo rm || true
          find $SOURCE -type f -name "box*-android*" | sort | head -n -1 | xargs sudo rm || true
          find $SOURCE -type f -name "box64_*" | sort | head -n -1 | xargs sudo rm || true
          find $SOURCE -type f -name "box86_*" | sort | head -n -1 | xargs sudo rm || true
          find $SOURCE -type f -name "chromium-browser_*" | sort | head -n -3 | xargs sudo rm || true
          find $SOURCE -type f -name "chromium-codecs-ffmpeg_*" | sort | head -n -2 | xargs sudo rm || true
          find $SOURCE -type f -name "chromium-codecs-ffmpeg-extra_*" | sort | head -n -2 | xargs sudo rm || true

          # store info to GitHub Actions
          echo "<details><summary>Show packages</summary><p>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          find $SOURCE -type f -name "*.deb" | rev | cut -d"/" -f1 | rev | sed -e 's/^/- /;'>> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

          # repack deb files
          #DEBS=($(find "${SOURCE}"* -type f -name "thunderbird_*.deb" -o -name "firefox_*.deb" -o -name "chromium*.deb"))
          #for d in ${DEBS[@]}; do
            #BEFORE=$(deb-reversion -c ${d} -s armbian)
            #add epoch 9
            #AFTER=9:$(echo $BEFORE | cut -d":" -f2)
            #echo "$d : $BEFORE -> $AFTER"
            #sudo DEBEMAIL=info@armbian.com deb-reversion -v $AFTER -s armbian $d
            #sudo rm $d
          #done

          if [[ ${TARGET} == main ]]; then
                  if grep -qE 'B' <<< "$REPOSITORY"; then find $SOURCE -type f -name "*.deb" -exec cp {} build/output/debs-beta/ \;; fi
                  if grep -qE 'S' <<< "$REPOSITORY"; then find $SOURCE -type f -name "*.deb" -exec cp {} build/output/debs/ \;; fi
          elif [[ ${RELEASE} == all ]]; then
              for i in ${ALL_RELEASES[@]}; do
                  if grep -qE 'B' <<< "$REPOSITORY"; then find $SOURCE -type f -name "*.deb" -exec cp {} build/output/debs-beta/extra/${i}-${TARGET} \;; fi
                  if grep -qE 'S' <<< "$REPOSITORY"; then find $SOURCE -type f -name "*.deb" -exec cp {} build/output/debs/extra/${i}-${TARGET} \;; fi
              done
          else
              if grep -qE 'B' <<< "$REPOSITORY"; then find $SOURCE -type f -name "*.deb" -exec cp {} build/output/debs-beta/extra/${RELEASE}-${TARGET} \;; fi
              if grep -qE 'S' <<< "$REPOSITORY"; then find $SOURCE -type f -name "*.deb" -exec cp {} build/output/debs/extra/${RELEASE}-${TARGET} \;; fi
          fi

      - name: Deploy to server
        if: inputs.REFERENCE == 'main'
        run: |

          rsync -e "ssh -p ${{ secrets.HOST_UPLOAD_PORT }}" -arvc build/output/debs/ ${{ secrets.HOST_UPLOAD_USER }}@${{ secrets.HOST_UPLOAD }}:/incoming/debs
          rsync -e "ssh -p ${{ secrets.HOST_UPLOAD_PORT }}" -arvc build/output/debs-beta/ ${{ secrets.HOST_UPLOAD_USER }}@${{ secrets.HOST_UPLOAD }}:/incoming/debs-beta

      - name: Build testing repository
        run: |
          cd build
          mkdir -p repository/public
          sed -i 's|"gpgProvider": ".*"|"gpgProvider": "gpg2"|g' tools/repository/aptly.conf
          tools/repository/repo -i output/debs-beta -c update -p sendmail
          rsync -arvc --rsync-path="mkdir -p /home/artifacts/artifacts/${{ env.PR_NUMBER }}/${{ matrix.node }} && rsync" output/repository/public/ artifacts@armbian.tnahosting.net:"/home/artifacts/artifacts/${{ env.PR_NUMBER }}/${{ matrix.node }}"

      - name: Create a temporary artifact folder
        run: |
          mkdir downloads

      - name: Add artifacts
        run: |
          cd downloads
          echo "armbian.tnahosting.net/" > url.txt
          echo "artifacts/${{ env.PR_NUMBER }}/" > path.txt

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: assets-for-download
          path: downloads
          retention-days: 5

  test:

    name: "Test"
    needs: download
    runs-on: ${{ inputs.BUILD_RUNNER }}
    outputs:
      max-parallel: 18
      matrix:  ${{steps.json.outputs.JSON_CONTENT}}
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: armbian/os
          path: os
          fetch-depth: '2'
          clean: false

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          path: os
          files: |
            external/*.conf

      - name: "Make JSON"
        id: json
        run: |

          echo 'JSON_CONTENT<<EOF' >> $GITHUB_OUTPUT
          packages=$(echo ${{ steps.changed-files.outputs.all_changed_files }}  | tr " " "\n" | cut -d"." -f1 | cut -d"/" -f2)
          [[ "${{ inputs.REFERENCE }}" =~ ^(main|)$ ]] && packages=$(find os/external/*.conf -printf '%f\n' | cut -d"." -f1)
          for i in ${packages[@]}; do
              . os/external/${i}.conf
              [[ -z $INSTALL ]] && continue
              if [[ $RELEASE != all ]]; then
                  dockerimages=("debian:bullseye" "debian:bookworm" "debian:sid" "ubuntu:jammy" "ubuntu:lunar")
                  dockerimages=($(printf '%s\n' "${dockerimages[@]}" | grep "$RELEASE"))
                else
                  dockerimages=("debian:bullseye" "debian:bookworm" "debian:sid" "ubuntu:jammy" "ubuntu:lunar")
              fi
              for j in ${dockerimages[@]}; do
              echo "{\"package\":\"${i}\",\"image\":\"$j\"}"
              done
          done | jq -s >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  gradle:
    needs: test
    strategy:
      fail-fast: false
      max-parallel: 32
      matrix:
        image: ${{ fromJSON(needs.test.outputs.matrix) }}

    name: "I"
    timeout-minutes: 30
    runs-on: ${{ inputs.BUILD_RUNNER }}
    container:
        image: "${{ matrix.image.image }}"
    steps:

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: assets-for-download
          path: downloads

      - name: Checkout Armbian OS Config
        uses: actions/checkout@v4
        with:
          repository: armbian/os
          ref: ${{ inputs.REFERENCE }}
          clean: false
          fetch-depth: 1
          path: os

      - name: Install
        run: |

          # source vars
          . "os/external/${{ matrix.image.package }}.conf"

          URL=$(cat downloads/url.txt)$(cat downloads/path.txt)$(echo "${{ matrix.image.package }}" | cut -d":" -f1)

          export DEBIAN_FRONTEND=noninteractive
          RELEASE=$(echo "${{ matrix.image.image }}" | cut -d":" -f2)
          apt update
          apt -y install wget gpg

          # add armbian repository
          wget https://${URL}/armbian.key -O key
          gpg --dearmor < key | tee /usr/share/keyrings/armbian.gpg > /dev/null
          chmod go+r /usr/share/keyrings/armbian.gpg
          echo "deb [signed-by=/usr/share/keyrings/armbian.gpg] http://${URL} $RELEASE main ${RELEASE}-utils ${RELEASE}-desktop" | tee /etc/apt/sources.list.d/armbian.list
          apt update -y
          apt upgrade -y

          # install packages / except howdy as its too large
          export DEBIAN_FRONTEND=noninteractive
          for i in ${INSTALL}; do
          apt-get install -y $i
          done

  clean:

    name: "Clean"
    needs: gradle
    runs-on: ${{ inputs.BUILD_RUNNER }}
    outputs:
      matrix:  ${{steps.json.outputs.JSON_CONTENT}}
    steps:

      - name: Install SSH key for storage
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.KEY_UPLOAD }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_ARMBIAN_UPLOAD }}
          if_key_exists: replace

      - name: Change status to done
        if: inputs.REFERENCE == 'main'
        run: |

          echo "done" > status
          rsync -e "ssh -p ${{ secrets.HOST_UPLOAD_PORT }}" -arvc status ${{ secrets.HOST_UPLOAD_USER }}@${{ secrets.HOST_UPLOAD }}:/incoming/debs
          rsync -e "ssh -p ${{ secrets.HOST_UPLOAD_PORT }}" -arvc status ${{ secrets.HOST_UPLOAD_USER }}@${{ secrets.HOST_UPLOAD }}:/incoming/debs-beta

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: assets-for-download
          path: downloads

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: armbian/os
          path: os
          fetch-depth: '2'
          clean: false

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          path: os
          files: |
            external/*.conf

      - name: "Make JSON"
        id: json
        run: |

          packages=$(echo ${{ steps.changed-files.outputs.all_changed_files }}  | tr " " "\n" | cut -d"." -f1 | cut -d"/" -f2)
          [[ "${{ inputs.REFERENCE }}" =~ ^(main|)$ ]] && MATRIX=$(find os/external/*.conf -printf '%f\n' | cut -d"." -f1)
          for i in ${packages[@]}; do
              ssh -o StrictHostKeyChecking=no artifacts@armbian.tnahosting.net "rm -r $(cat downloads/path.txt)/${i}"
          done

      - name: "Lets clean artifacts that are useless"
        uses: geekyeggo/delete-artifact@v2
        with:
          name: assets-for-download
          failOnError: false
