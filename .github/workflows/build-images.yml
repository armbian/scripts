name: Build images

on:

  workflow_call:
    inputs:
      config:
       required: true
       type: string
      branch:
       required: false
       type: string
      release:
       required: false
       type: string
      variant:
       required: false
       type: string
      version:
       required: false
       type: string
      board:
       required: false
       type: string
      part:
        required: true
        type: number
      of:
        required: true
        type: number
    secrets:
      ACCESS_TOKEN:
        required: true
      SSH_KEY_TORRENTS:
        required: true
      KNOWN_HOSTS_UPLOAD:
        required: true
      GPG_KEY1:
        required: true
      GPG_PASSPHRASE1:
        required: true

jobs:

  prepare:

    name: "JSON"
    if: ${{ github.repository_owner == 'armbian' }}
    runs-on: ubuntu-latest
    outputs:
      matrix:  ${{steps.json.outputs.JSON_CONTENT}}
      runner:  ${{steps.json.outputs.runner}}
    steps:

      - name: "Fix permissions"
        run: |

          sudo chown -R $USER.$USER .

      - name: Checkout Armbian Framework
        uses: actions/checkout@v3.3.0
        with:
          repository: armbian/build
          ref:  main
          fetch-depth: 1
          clean: false
          path: build

      - name: Checkout Armbian OS Config
        uses: actions/checkout@v3.3.0
        with:
          repository: armbian/os
          ref:  main
          clean: false
          fetch-depth: 1
          path: os

      - name: "Rsync userpatches"
        run: |

          rsync -av os/userpatches/. build/userpatches/

      - name: "Make JSON"
        id: json
        run: |

          # lets mix GitHub runners and ours
          array=("ubuntu-latest" "qemu" "qemu")
          echo runner=$(index=$(shuf -i 1-3 -n 1);echo ${array[$index]}) >> $GITHUB_OUTPUT
          
          # Prepare list
          cat os/targets/${{ inputs.config }} \
          | grep -v "^$\|^#" \
          | awk '$6 != "no"' \
          | grep " ${{ inputs.branch }} " \
          | grep "${{ inputs.release }} " \
          | grep "${{ inputs.variant }}" \
          | grep "${{ inputs.board }}" > targets.txt

          # Split list into chunks and convert it JSON          
          echo 'JSON_CONTENT<<EOF' >> $GITHUB_OUTPUT
          split --number=l/${{ inputs.part }}/${{ inputs.of }} <<< cat targets.txt \
          | awk '{print  "{\"board\":\""$1"\",\"branch\":\""$2"\",\"release\":\""$3"\",\"variant\":\""$4"\",\"desktop\":\""$7"\",\"app_group\":\""$9"\",\"runner_tags\":\"qemu\"}"}' | jq $FILTER | jq -s >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  Docker:

    name: "*"
    needs: [ prepare ]
    if: ${{ needs.prepare.outputs.matrix != '[]' && needs.prepare.outputs.matrix != '' }}
    timeout-minutes: 120
    strategy:
      max-parallel: 16 # we are running 6 chunks which comes to 96 parallel builds (could be too much)
      fail-fast: false # let other jobs try to complete if one fails
      matrix:
        include: ${{ fromJSON(needs.prepare.outputs.matrix) }}

    env:
      BOARD:           "${{ matrix.board }}"
      BRANCH:          "${{ matrix.branch }}"
      RELEASE:         "${{ matrix.release }}"
      VARIANT:         "${{ matrix.variant }}"
      DESKTOP:         "${{ matrix.desktop }}"
      APP_GROUP:       "${{ matrix.app_group }}"
      RUNNER_TAG:      "${{ matrix.runner_tag }}"

    runs-on:  [ "${{ needs.prepare.outputs.runner || 'ubuntu-latest' }}" ]

    steps:

      - name: "Generate key id" # We need this in case we run multiple runners on one machine
        run: echo "RANDOM=ID_$((RANDOM%1000000))" >> $GITHUB_ENV
        shell: bash

      - name: Checkout Armbian build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        with:
          repository: armbian/build #${{ github.repository_owner }}/armbian-build
          ref: main
          fetch-depth: 1
          clean: false
          path: build

      - name: Checkout Armbian OS Config
        uses: actions/checkout@v3.3.0
        with:
          repository: armbian/os
          ref:  main
          fetch-depth: 1
          clean: false
          path: os

      - name: Install SSH key for storage
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY_TORRENTS }}
          name: ${{ env.RANDOM }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
          if_key_exists: replace

      - name: Cleanup
        run: |
          sudo rm -rf build/output/images/* || true
          sudo rm -rf build/cache/rootfs/* || true
          # remove other projects
          PROJECT=$(echo ${{ github.workspace }} | rev | cut -d'/' -f 1 | rev)
          find $(echo ${{ github.workspace }} | rev | cut -d"/" -f3- | rev) -mindepth 1 -maxdepth 1 ! -name "_*" ! -name ${PROJECT} -exec sudo rm -rf {} + || true

      - name: "Rsync userpatches"
        run: |

          rsync -av os/userpatches/. build/userpatches/

      - name: Create images BOARD="${{env.BOARD}}" BRANCH="${{env.BRANCH}}" RELEASE="${{env.RELEASE}}"
        if: ${{ github.repository_owner == 'Armbian' }}
        id: rootfs
        run: |

           DESKTOP_ENVIRONMENT="${{env.DESKTOP}}"
           BUILD_DESKTOP="yes"
           BUILD_MINIMAL="no"
           [[ "${{env.VARIANT}}" == minimal ]] && BUILD_MINIMAL="yes"
           [[ -z "${{env.DESKTOP}}" ]] && DESKTOP_ENVIRONMENT="" && BUILD_DESKTOP="no"
           cd build
           # IMAGE_VERSION="${{ inputs.version }}"
           bash ./compile.sh armbian-images \
           IMAGE_VERSION="${{ inputs.version }}" \
           SHARE_LOG="yes" \
           BOARD="${{env.BOARD}}" \
           BRANCH="${{env.BRANCH}}" \
           RELEASE="${{env.RELEASE}}" \
           BUILDING_IMAGE="yes" \
           BUILD_MINIMAL="${BUILD_MINIMAL}" \
           MAKE_FOLDERS="archive" \
           BUILD_DESKTOP="${BUILD_DESKTOP}" \
           DESKTOP_APPGROUPS_SELECTED="${{env.APP_GROUP}}" \
           DESKTOP_ENVIRONMENT="${{ env.DESKTOP }}" \
           DESKTOP_ENVIRONMENT_CONFIG_NAME=config_base

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_KEY1 }}
          passphrase: ${{ secrets.GPG_PASSPHRASE1 }}

      - name: Sign
        run: |

          echo ${{ secrets.GPG_PASSPHRASE1 }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes build/output/images/${{env.BOARD}}/archive/*.img.xz

      - name: "Upload artefacts"
        if: ${{ github.repository_owner == 'Armbian' && github.event.inputs.release != 'stable' }}
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/output/images/*/*/Armbian_${{ inputs.version }}*.*"
          tag: "${{ inputs.version }}"
          omitBody: true
          replacesArtifacts: true
          omitName: true
          allowUpdates: true
          artifactErrorsFailBuild: false
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Deploy to server
        if: ${{ github.repository_owner == 'Armbian' && github.event.inputs.release == 'stable' }}
        run: |
          if ! command -v "lftp" > /dev/null 2>&1; then
             sudo apt-get -y -qq install lftp
          fi
          lftp -u upload, -e "set sftp:connect-program ssh -ax -i $HOME/.ssh/${{ env.RANDOM }}; set net:timeout 4;set net:max-retries 6;mirror -R --no-empty-dirs --parallel=8 --no-perms build/output/images/ images/ ;bye" sftp://users.armbian.com

      - name: Cleanup
        run: |

          sudo rm -rf build/output/images/* || true
          sudo rm -rf build/cache/rootfs/* || true
          # remove other projects
          PROJECT=$(echo ${{ github.workspace }} | rev | cut -d'/' -f 1 | rev)
          find $(echo ${{ github.workspace }} | rev | cut -d"/" -f3- | rev) -mindepth 1 -maxdepth 1 ! -name "_*" ! -name ${PROJECT} -exec sudo rm -rf {} + || true
