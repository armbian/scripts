name: Build images

on:

  workflow_call:
    inputs:
      config:
       required: true
       type: string
      branch:
       required: false
       type: string
      deploy:
       required: false
       type: string
      gitbranch:
       required: false
       type: string
      release:
       required: false
       type: string
      variant:
       required: false
       type: string
      version:
       required: false
       type: string
      parallel:
       required: false
       type: number      
      board:
       required: false
       type: string
      part:
        required: true
        type: number
      of:
        required: true
        type: number
    secrets:
      ACCESS_TOKEN:
        required: true
      KEY_ARMBIAN_UPLOAD:
        required: false
      KNOWN_HOSTS_ARMBIAN_UPLOAD:
        required: false
      ARMBIAN_HOST_UPLOAD:
        required: false
      GPG_KEY1:
        required: true
      GPG_PASSPHRASE1:
        required: true

jobs:

  prepare:

    name: "JSON"
    #if: ${{ github.repository_owner == 'armbian' }}
    runs-on: ubuntu-latest
    outputs:
      matrix:  ${{steps.json.outputs.JSON_CONTENT}}
      runner:  ${{steps.json.outputs.runner}}
    steps:

      - name: Runner clean
        uses: armbian/actions/runner-clean@main

      - name: Checkout Armbian Framework
        uses: actions/checkout@v4
        with:
          repository: armbian/build
          ref:  "${{ inputs.gitbranch || 'main' }}"
          fetch-depth: 1
          clean: false
          path: build

      - name: Checkout Armbian OS Config
        uses: actions/checkout@v4
        with:
          repository: armbian/os
          ref:  main
          clean: false
          fetch-depth: 1
          path: os

      - name: "Rsync userpatches"
        run: |

          rsync -av os/userpatches/. build/userpatches/

      - name: "Make JSON"
        id: json
        run: |

          # to cover if "all" is selected in the menu
          SELECTED_BOARD="${{ inputs.board }}"
          [[ "${SELECTED_BOARD}" == all ]] && unset SELECTED_BOARD
          
          # Prepare list
          FILES=$(cat os/targets/${{ inputs.config }} \
          | grep -v "^$\|^#" \
          | awk '$6 != "no"' \
          | grep " ${{ inputs.branch }} " \
          | grep "${{ inputs.release }} " \
          | grep "${{ inputs.variant }}" \
          | grep "${SELECTED_BOARD}")
          while IFS= read -r line; do

              BOARD=$(echo $line | cut -d " " -f1)
              BOARDFAMILY=$(cat build/config/boards/${BOARD}.* | grep BOARDFAMILY | cut -d'"' -f2)
              source build/config/boards/$line.conf 2> /dev/null || true
              source build/config/boards/$line.wip 2> /dev/null || true
              source build/config/boards/$line.tvb 2> /dev/null || true
              source build/config/sources/families/${BOARDFAMILY}.conf 2> /dev/null || true

              runner_1="ubuntu-latest"
              runner_2="ubuntu-latest"
              # pick runner tags
              if [[ "${{ inputs.runner }}" == private ]]; then
                  [[ $ARCH == arm* ]] && runner_1="ARM64" && runner_2="fast"
                  [[ $ARCH == riscv64 || $ARCH == amd64 ]] && runner_1="X64" && runner_2="fast"
              fi

              # add runner id as prefix
              echo "$runner_1 $runner_2 $line"

          done <<< $FILES > targets.txt
          
          # Split list into chunks and convert it JSON          
          echo 'JSON_CONTENT<<EOF' >> $GITHUB_OUTPUT
          split --number=l/${{ inputs.part }}/${{ inputs.of }} <<< cat targets.txt \
          |  awk '{print  "{\"board\":\""$3"\",\"branch\":\""$4"\",\"release\":\""$5"\",\"variant\":\""$6"\",\"desktop\":\""$9"\",\"app_group\":\""$11"\",\"runner_1\":\""$1"\",\"runner_2\":\""$2"\"}"}' | jq $FILTER | jq -s >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  Docker:

    name: "*"
    needs: [ prepare ]
    if: ${{ needs.prepare.outputs.matrix != '[]' && needs.prepare.outputs.matrix != '' }}
    timeout-minutes: 120
    strategy:
      max-parallel: "${{ inputs.parallel || 16 }}" # we are running 6 chunks which comes to 96 parallel builds (could be too much)
      fail-fast: false # let other jobs try to complete if one fails
      matrix:
        include: ${{ fromJSON(needs.prepare.outputs.matrix) }}

    env:
      BOARD:           "${{ matrix.board }}"
      BRANCH:          "${{ matrix.branch }}"
      RELEASE:         "${{ matrix.release }}"
      VARIANT:         "${{ matrix.variant }}"
      DESKTOP:         "${{ matrix.desktop }}"
      APP_GROUP:       "${{ matrix.app_group }}"

    #runs-on:  [ "${{ needs.prepare.outputs.runner || 'ubuntu-latest' }}" ]
    #runs-on: [ ${{ matrix.runner }} ]    
    #runs-on: [ '${{ matrix.runner }}' ]
    #runs-on: [ARM64,fast]
    runs-on:
      - ${{ matrix.runner_1 }}
      - ${{ matrix.runner_2 }}

    steps:

      - name: Runner clean
        uses: armbian/actions/runner-clean@main

      - name: Checkout Armbian build repo
        uses: actions/checkout@v4 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        with:
          repository: armbian/build #${{ github.repository_owner }}/armbian-build
          ref:  "${{ inputs.gitbranch || 'main' }}"
          fetch-depth: 1
          clean: false
          path: build

      - name: Checkout Armbian OS Config
        uses: actions/checkout@v4
        with:
          repository: armbian/os
          ref:  main
          fetch-depth: 1
          clean: false
          path: os

      - name: Install SSH key for storage
        env:
          KEY_ARMBIAN_UPLOAD: ${{ secrets.KEY_ARMBIAN_UPLOAD }}
        if: env.KEY_ARMBIAN_UPLOAD != null
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.KEY_ARMBIAN_UPLOAD }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_ARMBIAN_UPLOAD }}
          if_key_exists: replace

      - name: Check API rate limits
        run: |

          while true
            do
            API_CALLS_TOTAL=$(curl -s -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" https://api.github.com/rate_limit | jq -r '.rate.limit')
            API_CALLS_LEFT=$(curl -s -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" https://api.github.com/rate_limit | jq -r '.rate.remaining')
            PERCENT=$(( API_CALLS_LEFT * 100 / API_CALLS_TOTAL ))
            if [[ $PERCENT =~ ^[0-9]+$ ]]; then
                    if [[ $PERCENT -gt 50 ]]; then
                            echo "API rate in good shape $PERCENT % free"
                    exit 0
                    fi
            fi
            echo "API rate lower then 50%, sleping 5m"
            sleep 5m
          done

      - name: Cleanup
        run: |
        
          # show current api rate
          curl -s -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" https://api.github.com/rate_limit
        
          sudo rm -rf build/output/images/* || true
          sudo rm -rf build/cache/rootfs/* || true
          # remove other projects
          PROJECT=$(echo ${{ github.workspace }} | rev | cut -d'/' -f 1 | rev)
          find $(echo ${{ github.workspace }} | rev | cut -d"/" -f3- | rev) -mindepth 1 -maxdepth 1 ! -name "_*" ! -name ${PROJECT} -exec sudo rm -rf {} + || true

      - name: "Rsync userpatches"
        run: |

          rsync -av os/userpatches/. build/userpatches/

      - name: Create images BOARD="${{env.BOARD}}" BRANCH="${{env.BRANCH}}" RELEASE="${{env.RELEASE}}"
        #if: ${{ github.repository_owner == 'Armbian' }}
        id: rootfs
        run: |

           [[ "${{ inputs.release }}" == stable ]] && BETA="no" || BETA="yes"
           DESKTOP_ENVIRONMENT="${{env.DESKTOP}}"
           BUILD_DESKTOP="yes"
           BUILD_MINIMAL="no"
           [[ "${{env.VARIANT}}" == minimal ]] && BUILD_MINIMAL="yes"
           [[ -z "${{env.DESKTOP}}" ]] && DESKTOP_ENVIRONMENT="" && BUILD_DESKTOP="no"
           cd build
           # IMAGE_VERSION="${{ inputs.version }}"
           bash ./compile.sh armbian-images \
           BSPFREEZE="yes" \
           BETA="${BETA}" \
           IMAGE_VERSION="${{ inputs.version }}" \
           SHARE_LOG="yes" \
           BOARD="${{env.BOARD}}" \
           BRANCH="${{env.BRANCH}}" \
           RELEASE="${{env.RELEASE}}" \
           BUILDING_IMAGE="yes" \
           BUILD_MINIMAL="${BUILD_MINIMAL}" \
           MAKE_FOLDERS="archive" \
           BUILD_DESKTOP="${BUILD_DESKTOP}" \
           DESKTOP_APPGROUPS_SELECTED="${{env.APP_GROUP}}" \
           DESKTOP_ENVIRONMENT="${{ env.DESKTOP }}" \
           DESKTOP_ENVIRONMENT_CONFIG_NAME=config_base

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY1 }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_KEY1 }}
          passphrase: ${{ secrets.GPG_PASSPHRASE1 }}

      - name: Sign
        env:
          GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
        if: env.GPG_PASSPHRASE1 != null
        run: |

          echo ${{ secrets.GPG_PASSPHRASE1 }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes build/output/images/${{env.BOARD}}/archive/*.img.xz

      - name: "Upload artefacts"
        #if: ${{ github.repository_owner == 'Armbian' && github.event.inputs.release != 'stable' }}
        if: ${{ inputs.release != 'stable' }}
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/output/images/*/*/Armbian_${{ inputs.version }}*.*"
          tag: "${{ inputs.version }}"
          omitBody: true
          replacesArtifacts: true
          omitName: true
          makeLatest: false
          omitPrereleaseDuringUpdate: true
          allowUpdates: true
          artifactErrorsFailBuild: false
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Deploy to server
        timeout-minutes: 30
        env:
          KEY_ARMBIAN_UPLOAD: ${{ secrets.KEY_ARMBIAN_UPLOAD }}
          ARMBIAN_HOST_UPLOAD: ${{ secrets.ARMBIAN_HOST_UPLOAD }}

        if: env.KEY_ARMBIAN_UPLOAD != null && env.ARMBIAN_HOST_UPLOAD != null && inputs.deploy == 'true'
        run: |
          # install dependencies
          if ! command -v "lftp" > /dev/null 2>&1; then
             sudo apt-get -y -qq install lftp
          fi
          # secure upload
          lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror -R --no-empty-dirs --parallel=8 --no-perms build/output/images/ ${{ inputs.release }}/ ;bye" sftp://${{ env.ARMBIAN_HOST_UPLOAD }}
          
      - name: Cleanup
        run: |

          sudo rm -rf build/output/images/* || true
          sudo rm -rf build/cache/rootfs/* || true
