name: Smoke tests
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      GITBRANCH:
       required: true
       type: string
       default: "main"
      PWRMNGMT:
       required: true
       type: string
       default: "true"
    secrets:
      NETBOX_TOKEN:
        required: true
      KEY_CI:
        required: true
      KEY_POWER_ON:
        required: true
      KEY_POWER_OFF:
        required: true
      USER_REPOSITORY:
        required: true
      HOST_REPOSITORY:
        required: true
      KNOWN_HOSTS_REPOSITORY:
        required: true
jobs:

  Prepare:
    name: "Power system on"
    outputs:
      matrix: ${{steps.json.outputs.JSON_CONTENT}}
    runs-on: [self-hosted, Linux, local]
    steps:

      - name: "Power on"
        if: ${{ inputs.PWRMNGMT == 'true' }}
        uses: armbian/actions/power-on@main
        with:
          KEY_POWER_ON: ${{ secrets.KEY_POWER_ON }}
          USER_REPOSITORY: ${{ secrets.USER_REPOSITORY }}
          HOST_REPOSITORY: ${{ secrets.HOST_REPOSITORY }}
          KNOWN_HOSTS_REPOSITORY: ${{ secrets.KNOWN_HOSTS_REPOSITORY }}

      - name: Get devices from database
        id: json
        run: |

          echo 'JSON_CONTENT<<EOF' >> $GITHUB_OUTPUT
          curl -H "Authorization: Token ${{ secrets.NETBOX_TOKEN }}" -H "Accept: application/json; indent=4" \
          "https://stuff.armbian.com/netbox/api/dcim/devices/?limit=500&name__empty=false&tenant=igor&status=active&device_role=DUT&tag=qa" \
          | jq '.results[] | .device_type.slug, .id, .primary_ip.address' | xargs -n3 -d'\n' | grep -v null \
          | sed 's/\/24"/"/g' | sed "s/ /:/g" | sed "s/\"//g" |jq -cnR '[inputs | select(length>0)]' | jq >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  Test:
    name: "DUT"
    runs-on: [igor]
    needs: Prepare
    if: ${{ needs.Prepare.outputs.matrix != '[]' && needs.Prepare.outputs.matrix != '' }}
    timeout-minutes: 60
    strategy:
      max-parallel: 32
      fail-fast: false
      matrix:

        node: ${{fromJson(needs.Prepare.outputs.matrix)}}

    steps:

      - name: Runner clean
        uses: armbian/actions/runner-clean@main

      - name: Checkout Armbian OS repo
        uses: actions/checkout@v3
        with:
          repository: armbian/scripts
          fetch-depth: 1
          clean: false
          path: scripts

      - name: Checkout Armbian build repo
        uses: actions/checkout@v3
        with:
          repository: armbian/build
          fetch-depth: 1
          ref: "${{ inputs.GITBRANCH }}"
          clean: false
          path: build

      - name: Install SSH key for storage
        uses: shimataro/ssh-key-action@v2.5.1
        with:
          key: ${{ secrets.KEY_CI }}
          known_hosts: github.com ssh-rsa AAAAB3Nz
          if_key_exists: replace

      - name: Read values
        run: |

          # read matrix
          CHUNK="${{ matrix.node }}"
          
          # extract values
          DUT_SLUG=$(echo $CHUNK | cut -d":" -f1)
          DUT_ID=$(echo $CHUNK | cut -d":" -f2)
          DUT_IP=$(echo $CHUNK | cut -d":" -f3)
          
          # save to environment
          echo "DUT_SLUG=$DUT_SLUG" >> $GITHUB_ENV
          echo "DUT_ID=$DUT_ID" >> $GITHUB_ENV
          echo "DUT_IP=$DUT_IP" >> $GITHUB_ENV
          
          # read board configs and save to environment
          CFG_CONTENT="$(cat build/config/boards/${DUT_SLUG}.* | grep -e "KERNEL_TARGET\|BOARD_NAME")"
          eval "$CFG_CONTENT"
          echo "BOARD_NAME=$BOARD_NAME" >> $GITHUB_ENV
          echo "KERNEL_TARGET=$KERNEL_TARGET" >> $GITHUB_ENV

          # read power connector id
          CFG_CONTENT=$(curl -H "Authorization: Token ${{ secrets.NETBOX_TOKEN }}" -H "Accept: application/json; indent=4" \
          "https://stuff.armbian.com/netbox/api/dcim/power-ports/?limit=500&name__empty=false&device_id=$DUT_ID" \
          | jq '.results[] | .link_peer.display')
          echo "POWER_PORT=$(echo $CFG_CONTENT | cut -d'(' -f2 | cut -d')' -f1 | grep -Eo '[0-9]{1,4}')" >> $GITHUB_ENV

      - name: "Is ${{ env.DUT_IP }} online via power port ${{ env.POWER_PORT }} ?"
        run: |

          # set this here
          echo "REBOOT=false" >> $GITHUB_ENV

          server="${{ env.DUT_IP }}"
          if nc -z $server 22 -w 15 2>/dev/null; then
            echo "$server ✓"
            echo "PROCEED=true" >> $GITHUB_ENV
            echo "ONLINE=true" >> $GITHUB_ENV
          else
            echo "$server ✗ needs to be power cycled"
            echo "ONLINE=false" >> $GITHUB_ENV
            [[ -n "${{ env.POWER_PORT }}" ]] && ssh -o StrictHostKeyChecking=no root@10.0.40.6 "./restart ${{ env.POWER_PORT }}" || true
          fi

      - name: First run and copy ssh keys to the DUT
        if: ${{ github.repository_owner == 'Armbian' && env.PROCEED == 'true' }}
        run: |

          [[ -z $(command -v sshpass) ]] && sudo apt-get -yy install sshpass

          mkdir -p ~/.ssh/
          cp scripts/autotests.pub ~/.ssh/id_rsa.pub
          ls -l ~/.ssh/
          export TERM=vt100

            USER_HOST=10.0.10.238
            # login credentials
            USER_ROOT=root
            PASS_ROOT=testpassword
            USER_NORMAL=guest
            PASS_NORMAL=testpassword
            REPLACE_KEY=true
            
            # clean
            ssh-keygen -qf "$HOME/.ssh/known_hosts" -R "${{ env.DUT_IP }}" > /dev/null 2>&1

            if [[ "$(ssh -o StrictHostKeyChecking=accept-new -o BatchMode=yes -o ConnectTimeout=2 root@${{ env.DUT_IP }} "w " 2>&1 | grep "Permission denied")" ]]; then
              if [[ ! "$(sshpass -p 1234 ssh -o "StrictHostKeyChecking=accept-new" ${USER_ROOT}@${{ env.DUT_IP }} "w " 2>&1 | grep "Permission denied")" == "Permission denied"* ]]; then
              expect -c "
              spawn sshpass -p 1234 ssh -o "StrictHostKeyChecking=accept-new" ${USER_ROOT}@${{ env.DUT_IP }}
              set timeout 120
              expect \"Create root password: \"
              send \"${PASS_ROOT}\r\"
              expect \"Repeat root password: \"
              send \"${PASS_ROOT}\r\"
              expect \"zsh\"
              send \"2\r\"
              expect \"*to abort\"
              send \"${USER_NORMAL}\r\"
              expect \"Create*password:\"
              send \"${PASS_NORMAL}\r\"
              expect \"Repeat*password:\"
              send \"${PASS_NORMAL}\r\"
              expect \"Please provide your real name: \"
              send \"${NAME_NORMAL}\r\"
              expect \"*language based on your location*\"
              send \"y\r\"
              expect \"*#\"
              send \"exit\r\"
              "
              fi
            fi
 
            echo "Install keys always"
            sshpass -p "${PASS_ROOT}" ssh-copy-id -i ~/.ssh/id_rsa.pub -o "StrictHostKeyChecking=accept-new" root@${{ env.DUT_IP }}
            #sshpass -p "${PASS_NORMAL}" ssh-copy-id -i ~/.ssh/id_rsa.pub -o "StrictHostKeyChecking=accept-new" guest@${{ env.DUT_IP }}

      - name: First run and copy ssh keys to the DUT
        if: ${{ github.repository_owner == 'Armbian' && env.PROCEED == 'true' }}
        run: |

            echo "LINUXFAMILY=$(ssh -o StrictHostKeyChecking=no root@${{ env.DUT_IP }} "cat /etc/armbian-release | grep LINUXFAMILY | cut -d"=" -f2" || true)" >> $GITHUB_ENV            
            ssh -o StrictHostKeyChecking=no root@${{ env.DUT_IP }} "dpkg --configure -a; apt-get -y install binutils iperf3 neofetch datamash p7zip-full" || true

      - name: "Make sure we are updating from nightly repository"
        if: ${{ github.repository_owner == 'Armbian' && env.PROCEED == 'true' }}
        run: |

          ssh -o StrictHostKeyChecking=no root@${{ env.DUT_IP }} "sed -i 's/http:\/\/[^ ]*/http:\/\/beta.armbian.com/' /etc/apt/sources.list.d/armbian.list" || true

      - name: "Remove any installed kernel and cleanup"
        timeout-minutes: 3
        if: ${{ github.repository_owner == 'Armbian' && env.PROCEED == 'true' }}
        run: |

          ssh -o StrictHostKeyChecking=no root@${{ env.DUT_IP }} "apt-get -y purge '^linux-image-*' '^linux-dtb-*'" || true
          rm -rf *.json

      - name: "Install linux-image-legacy-${{ env.LINUXFAMILY }}"
        timeout-minutes: 15
        if: ${{ github.repository_owner == 'Armbian' && contains(env.KERNEL_TARGET, 'legacy') && env.PROCEED == 'true' }}
        run: |

           echo "${{ env.KERNEL_TARGET }}"
           ssh -o StrictHostKeyChecking=no root@${{ env.DUT_IP }} "apt update ; apt install linux-image-legacy-${{ env.LINUXFAMILY }}; apt install linux-dtb-legacy-${{ env.LINUXFAMILY }}" || true

      - name: Reboot
        timeout-minutes: 15
        if: ${{ github.repository_owner == 'Armbian' && contains(env.KERNEL_TARGET, 'legacy') && env.PROCEED == 'true' }}
        run: |

          ssh -o StrictHostKeyChecking=no root@${{ env.DUT_IP }} "shutdown --no-wall -r now" || true
          while true
          do
              sleep 10
              echo "Destination Host Unreachable"
              if nc -z "${{ env.DUT_IP }}" 22 -w 15 2>/dev/null; then
              break
              fi
          done

      - name: Collect data
        if: ${{ github.repository_owner == 'Armbian' && contains(env.KERNEL_TARGET, 'legacy') && env.PROCEED == 'true' }}
        timeout-minutes: 15
        uses: armbian/actions/collect-data@main
        with:
          kernel-target: legacy

      - name: "Install linux-image-current-${{ env.LINUXFAMILY }}"
        timeout-minutes: 15
        if: ${{ github.repository_owner == 'Armbian' && contains(env.KERNEL_TARGET, 'current') && env.PROCEED == 'true' }}
        run: |

           echo "${{ env.KERNEL_TARGET }}"
           ssh -o StrictHostKeyChecking=no root@${{ env.DUT_IP }} "apt update ; apt install linux-image-current-${{ env.LINUXFAMILY }}; apt install linux-dtb-current-${{ env.LINUXFAMILY }}" || true

      - name: Reboot
        timeout-minutes: 15
        if: ${{ github.repository_owner == 'Armbian' && contains(env.KERNEL_TARGET, 'current') && env.PROCEED == 'true' }}
        run: |

          ssh -o StrictHostKeyChecking=no root@${{ env.DUT_IP }} "shutdown --no-wall -r now" || true
          while true
          do
              sleep 10
              echo "Destination Host Unreachable"
              if nc -z "${{ env.DUT_IP }}" 22 -w 15 2>/dev/null; then
              break
              fi
          done
          
      - name: Collect data
        if: ${{ github.repository_owner == 'Armbian' && contains(env.KERNEL_TARGET, 'current') && env.PROCEED == 'true' }}
        timeout-minutes: 15
        uses: armbian/actions/collect-data@main
        with:
          kernel-target: current

      - name: "Install linux-image-edge-${{ env.LINUXFAMILY }}"
        timeout-minutes: 15
        if: ${{ github.repository_owner == 'Armbian' && contains(env.KERNEL_TARGET, 'edge') && env.PROCEED == 'true' }}
        run: |

           echo "${{ env.KERNEL_TARGET }}"
           ssh -o StrictHostKeyChecking=no root@${{ env.DUT_IP }} "apt update ; apt install linux-image-edge-${{ env.LINUXFAMILY }}; apt install linux-dtb-edge-${{ env.LINUXFAMILY }}" || true

      - name: Reboot
        timeout-minutes: 15
        if: ${{ github.repository_owner == 'Armbian' && contains(env.KERNEL_TARGET, 'edge') && env.PROCEED == 'true' }}
        run: |

          ssh  -o StrictHostKeyChecking=no root@${{ env.DUT_IP }} "shutdown --no-wall -r now" || true
          while true
          do
              sleep 10
              echo "Destination Host Unreachable"
              if nc -z "${{ env.DUT_IP }}" 22 -w 15 2>/dev/null; then
              break
              fi
          done

      - name: Collect data
        if: ${{ github.repository_owner == 'Armbian' && contains(env.KERNEL_TARGET, 'edge') && env.PROCEED == 'true' }}
        timeout-minutes: 15
        uses: armbian/actions/collect-data@main
        with:
          kernel-target: edge

  Stop:
    name: "Merge artifacts"
    if: always()
    needs: Test
    runs-on: [self-hosted, Linux, local]
    steps:

      - name: "Runner clean"
        uses: armbian/actions/runner-clean@main

      - name: "Download changes"
        uses: actions/download-artifact@v3.0.2
        with:
          name: JSON
          
      - name: "Delete artifact"
        uses: geekyeggo/delete-artifact@v2
        with:
          name: JSON

      - name: "Merge JSON parts"
        run: |
          echo "[" > merged.json
          cat ./*.parts | sed '$ s/.$//' >> merged.json
          echo "]" >> merged.json

      - name: "Upload JSON"
        uses: actions/upload-artifact@v3
        with:
          name: status
          path: merged.json

      - name: Power off
        if: ${{ inputs.PWRMNGMT == 'true' }}
        uses: armbian/actions/power-off@main
        with:

          KEY_POWER_OFF: ${{ secrets.KEY_POWER_OFF }}
          USER_REPOSITORY: ${{ secrets.USER_REPOSITORY }}
          HOST_REPOSITORY: ${{ secrets.HOST_REPOSITORY }}
          KNOWN_HOSTS_REPOSITORY: ${{ secrets.KNOWN_HOSTS_REPOSITORY }}
